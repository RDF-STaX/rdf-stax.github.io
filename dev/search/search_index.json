{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RDF Stream Taxonomy (RDF-STaX)","text":"<p>RDF-STaX is a taxonomy of RDF stream types. It can be used to describe published RDF streams, datasets, software tools, or scientific publications.</p> <p>RDF-STaX is modeled as an OWL 2 DL ontology, using SKOS to define the taxonomical structure.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Have a look at the taxonomy overview to get an idea of the different types of RDF streams that are defined in RDF-STaX. You can also see the ontology documentation for a more detailed description of the ontology.</p> <ul> <li>Taxonomy overview</li> <li>Ontology documentation</li> <li>How to use RDF-STaX?</li> <li>Nanopublications \u2013 publishing assertions about RDF stream type usage</li> <li>Use cases and publications</li> <li>Contributing</li> <li>Licensing and citation</li> </ul>"},{"location":"contributing/","title":"Contributing to RDF-STaX","text":"<p>Do you have an idea for how to improve RDF-STaX? Or maybe you found a bug? Any contributions are welcome!</p>"},{"location":"contributing/#filing-issues","title":"Filing issues","text":"<p>Feature requests, bug reports, and other issues can be filed in the issue tracker on GitHub.</p>"},{"location":"contributing/#editing-the-ontology","title":"Editing the ontology","text":"<p>The ontology is stored in the <code>src</code> directory of the main repository. It is split into two files:</p> <ul> <li>The main ontology file is <code>src/stax.ttl</code>. It should be edited with Prot\u00e9g\u00e9.<ul> <li>Do not add information about the authors/contributors there. This is done in the <code>src/authors.ttl</code> file (see below).</li> <li>Do not set the ontology's version IRI or version \u2013 this is done automatically in CI during release.</li> <li>You must keep this file valid OWL 2 DL. The CI will check it when you open a pull request.</li> </ul> </li> <li>The <code>src/authors.ttl</code> file contains information about the authors/contributors of the ontology. It should be edited manually with a text editor.</li> <li>The <code>src/alignments.ttl</code> file contains alignments to other vocabularies. It should be edited manually with a text editor.</li> </ul> <p>Pull requests are welcome.</p>"},{"location":"contributing/#competency-question-tests","title":"Competency question tests","text":"<p>The competency question tests are stored in the <code>tests</code> directory, divided into subdirectories by use cases \u2013 <code>uc{X}</code>. Each test is defined as a pair of files: a YAML file named <code>cq{X}-{Y}.yaml</code>, and SPARQL file named <code>cq{X}-{Y}.rq</code>, where <code>{X}</code> is the use case number and <code>{Y}</code> is the test number. The YAML file contains the metadata of the test, and the SPARQL file contains the query to be executed against the ontology.</p> <p>The YAML file must adhere to the JSON Schema defined in the <code>tests/test-schema.json</code> file. The CI will check if the tests are valid when you open a pull request.</p> <p>In each use case directory there is also an <code>index.md</code> file that describes the use case. This file is used to generate the documentation on the website.</p> <p>A list of all implemented competency question tests can be found in the documentation.</p>"},{"location":"contributing/#ci-pipeline","title":"CI pipeline","text":"<p>The CI automatically publishes the ontology (see the releases section below) and pushes it to the website. The CI does the following:</p> <ul> <li>Check if the ontology is valid and matches the OWL 2 DL profile (with ROBOT).</li> <li>Validate the competency question tests and run them agains the ontology.</li> <li>Set the ontology's version IRI and version.</li> <li>Save an OWL 2 DL version of the ontology in all supported formats.</li> <li>Infer additional statements with ROBOT.</li> <li>Merge in the author information from <code>src/authors.ttl</code>.</li> <li>Merge in the alignments to other vocabularies from <code>src/alignments.ttl</code>.</li> <li>Serialize the ontology in all supported formats.</li> </ul> <p>The CI code can be found in the <code>ci-worker</code> repository. The code there is licensed under Apache 2.0.</p>"},{"location":"contributing/#editing-documentation","title":"Editing documentation","text":"<p>Documentation is also stored in the main repository, in the <code>docs</code> directory. You can open a pull request for any of the files there, except the ones in the <code>includes</code> subdirectory. These files are generated automatically in the CI pipeline.</p> <p>You can also use the Edit this page link in the top right corner of each page on the website to edit the page directly on GitHub.</p>"},{"location":"contributing/#releases","title":"Releases","text":"<p>The <code>dev</code> (development) version corresponds to the <code>main</code> branch of the repository. A new development release is made automatically every time a commit is pushed to the <code>main</code> branch.</p> <p>The stable versions (e.g., 1.0.0) are created manually by the maintainer. To create a new tagged release:</p> <ol> <li>Check out the main branch of the main repo on your local machine.</li> <li>Update the main branch by running git pull. Make sure the pull was successful.</li> <li>Create a new tag with the version number: <code>git tag vX.Y.Z</code>.</li> <li>Push the tag to GitHub: <code>git push origin --tag vX.Y.Z</code>.</li> </ol> <p>The rest of the process is automatic. Make sure to prepend <code>v</code> before the version tag, e.g., <code>v1.0.0</code>. Otherwise, the release will not be created.</p>"},{"location":"contributing/#see-also","title":"See also","text":"<ul> <li>How to use RDF-STaX?</li> <li>Licensing and citation</li> </ul>"},{"location":"licensing/","title":"Licensing and citation","text":"<p>The RDF-STaX ontology and its documentation is licensed under the Creative Commons Attribution 4.0 license.</p>"},{"location":"licensing/#attribution-citation","title":"Attribution / citation","text":"<p>If you use RDF-STaX in your research, please cite the paper introducing it (PDF):</p> <p>Sowinski, P., Szmeja, P. Ganzha, M., &amp; Paprzycki, M. (2023). RDF Stream Taxonomy: Systematizing RDF Stream Types in Research and Practice. arXiv preprint arXiv:2311.14540.</p> <p>Or use this BibTeX entry:</p> <pre><code>@article{sowinski2023rdfstax,\n  title={RDF Stream Taxonomy: Systematizing RDF Stream Types in Research and Practice}, \n  author={Piotr Sowinski and Pawel Szmeja and Maria Ganzha and Marcin Paprzycki},\n  journal={arXiv preprint arXiv:2311.14540},\n  year={2023},\n  url={https://doi.org/10.48550/arXiv.2311.14540},\n  doi={10.48550/arXiv.2311.14540}\n}\n</code></pre>"},{"location":"licensing/#rdf-stax-maintainer","title":"RDF-STaX maintainer","text":"<p>RDF-STaX was created and is maintained by Piotr Sowi\u0144ski (Ostrzyciel) (ORCID).</p>"},{"location":"nanopubs/","title":"Nanopublications","text":"<p>Nanopublications are small units of publishable knowledge. RDF-STaX provides some helpful tools to aid you making nanopublications about RDF stream types in papers, software, on the Web, or elsewhere. You can also browse the existing nanopublications and use them in your work.</p>"},{"location":"nanopubs/#existing-nanopublications","title":"Existing nanopublications","text":"<p>Info</p> <p>Download the RDF-STaX nanopublication dump in RDF: TriG, N-Quads.</p> <p>The dump includes 32 nanopublications. Created at: 2024-04-10T08:58:28 UTC.</p> <p>Experimental: SPARQL endpoint</p> <p>You can query the dataset through the experimental SPARQL endpoint: query GUI.</p> <p>Endpoint URL: <code>https://query.np.trustyuri.net/repo/type/aabe9436b877b6a91acaa9741b3e1e5c1f47e1069ff2c0cb2bf0ceac25176629</code></p> <p>This endpoint may change or stop working in the future without prior notice.</p> <p>All valid nanopublications that annotate stream types using RDF-STaX can be downloaded using the links above. This dump is created automatically in the CI, and is updated whenever the ontology changes.</p> <p>You can also download the nanopubs using content negotiation on URLs like: </p> <ul> <li><code>https://w3id.org/{version}/nanopubs</code></li> <li><code>https://w3id.org/nanopubs</code></li> </ul> <p>The following content types are supported: <code>application/trig</code>, <code>application/n-quads</code>.</p> <p>There are also other ways to access the nanopublications \u2013 you can search for nanopubs with these parameters:</p> <ul> <li>Predicate: <code>http://purl.org/nanopub/x/hasNanopubType</code></li> <li>Object: <code>https://w3id.org/stax/ontology#RdfStreamTypeUsage</code></li> </ul>"},{"location":"nanopubs/#making-new-nanopublications","title":"Making new nanopublications","text":"<p>There are several ways to make nanopublications, but the easiest is using Nanodash. You only need to log in with your ORCID account, and you can start creating nanopublications right away.</p> <p>To create a nanopublication about RDF stream type usage, simply use this template \u2013 it will guide you through the process.</p> <p>The published nanopublications can be later updated or retracted, if needed.</p>"},{"location":"nanopubs/#example-nanopublication","title":"Example nanopublication","text":"<p>You can see an example nanopublication using this template here and in Nanodash.</p>"},{"location":"nanopubs/#see-also","title":"See also","text":"<ul> <li>How to use RDF-STaX</li> <li>Taxonomy overview</li> <li>Ontology documentation</li> </ul>"},{"location":"ontology/","title":"RDF-STaX ontology documentation","text":"<p>Info</p> <p>Download the ontology in RDF: Turtle, N-Triples, JSON-LD, RDF/XML.</p> <p>Info</p> <p>You can also download other versions of the ontology or an OWL 2 DL version. See the versioning and releases section below for more information.</p> <p>Note</p> <p>The documentation and the download links here are for the release version of the ontology. The ontology sources are available on GitHub \u2013 see also Contributing.</p> RDF Stream Taxonomy made by  pyLODE 2.13.2 Metadata URI <code>https://w3id.org/stax/ontology</code> Publisher(s) 0000-0002-2543-9461 Orcid logo Creator(s) Piotr Sowi\u0144ski Orcid logo Contributor(s) Pawe\u0142 Szmeja Orcid logo Created 2023-10-22T00:00:00 Modified 2024-04-10T08:58:22 Issued 2023-10-23T00:00:00 Version Information dev Version URI https://w3id.org/stax/dev/ontology Imports http://www.w3.org/TR/skos-reference/skos-owl1-dl.rdf License https://spdx.org/licenses/CC-BY-4.0 Source https://github.com/RDF-STaX/rdf-stax.github.io/tree/main Description <p>RDF-STaX is an OWL 2 DL ontology that enables describing the types of RDF streams and defines relations between them.</p> Table of Contents <ol> <li>Classes</li> <li>Object Properties</li> <li>Annotation Properties</li> <li>Named Individuals</li> <li>Namespaces</li> <li>Legend</li> </ol> Overview Figure 1: Ontology overview Classes \u2191 <ul> <li>Abstract RDF stream type</li> <li>Concrete RDF stream type</li> <li>RDF element type</li> <li>RDF stream type</li> <li>RDF stream type usage</li> </ul>            Abstract RDF stream type<sup>c</sup> # Classes URI <code>https://w3id.org/stax/ontology#AbstractRdfStreamType</code> Description <p>Class for abstract RDF stream types in the taxonomy. Instances of this class have abstract definitions, i.e., they cannot be used to annotate real streams. They are only intended to be used for reasoning about stream types.</p> Super-classes RDF stream type<sup>c</sup> Members stax:flatStream stax:rdfStream stax:groupedStream            Concrete RDF stream type<sup>c</sup> # Classes URI <code>https://w3id.org/stax/ontology#ConcreteRdfStreamType</code> Description <p>Class for the concrete RDF stream types in the taxonomy. Instances of this class have concrete definitions, and they can be used to annotate real streams.</p> Super-classes RDF stream type<sup>c</sup> Restrictions has element type<sup>op</sup> some RDF element type<sup>c</sup> has element type<sup>op</sup> only RDF element type<sup>c</sup> In domain of can be trivially extended into<sup>op</sup> has element type<sup>op</sup> is in stream type semantic relation with<sup>op</sup> can be flattened into<sup>op</sup> can be grouped into<sup>op</sup> In range of is in stream type semantic relation with<sup>op</sup> can be flattened into<sup>op</sup> has stream type<sup>op</sup> can be grouped into<sup>op</sup> can be trivially extended into<sup>op</sup> Members stax:flatQuadStream stax:graphStream stax:datasetStream stax:flatTripleStream stax:namedGraphStream stax:timestampedNamedGraphStream stax:subjectGraphStream            RDF element type<sup>c</sup> # Classes URI <code>https://w3id.org/stax/ontology#RdfElementType</code> Description <p>Class for base types of elements in RDF streams. There are four instances of this class (triple, quad, graph, dataset) and they should not be further specialized. The instances of this class do NOT form a taxonomical structure.</p> In range of has element type<sup>op</sup> Members stax:graph stax:dataset stax:triple stax:quad            RDF stream type<sup>c</sup> # Classes URI <code>https://w3id.org/stax/ontology#RdfStreamType</code> Description <p>Base class for RDF stream types. This class should not be used directly \u2013 use instead either stax:AbstractRdfStreamType or stax:ConcreteRdfStreamType.</p> Super-classes skos:Concept<sup>c</sup> Sub-classes Abstract RDF stream type<sup>c</sup> Concrete RDF stream type<sup>c</sup>            RDF stream type usage<sup>c</sup> # Classes URI <code>https://w3id.org/stax/ontology#RdfStreamTypeUsage</code> Description <p>Class for instances of using an RDF stream type, in a program, an academic paper, or elsewhere. This class is suitable for annotating both theoretical uses and practical ones, i.e., real streams or datasets.</p> <p>Instances of this class should have the stax:hasStreamType property pointing to a concrete stream type. The stax:usedIn property is recommended to indicate where the stream is used \u2013 alternatively you can use its inverse (stax:hasStreamTypeUsage). The use of other properties (e.g., rdfs:label, rdfs:comment) is encouraged to give more context about the usage.</p> <p>Note that \"stream type usage\" is a subjective assertion and instances of this class may be annotated with additional provenance properties to explain who made the assertion. There can be multiple views on what type of stream is in use, depending on the involved actor, processing step, etc.</p> Example(s) https://w3id.org/stax/dev/use-it/ Restrictions has stream type<sup>op</sup> only Concrete RDF stream type<sup>c</sup> In domain of has stream type<sup>op</sup> is usage of<sup>op</sup> In range of has stream type usage<sup>op</sup> Object Properties \u2191 <ul> <li>can be flattened into</li> <li>can be grouped into</li> <li>can be trivially extended into</li> <li>has element type</li> <li>has stream type</li> <li>has stream type usage</li> <li>is usage of</li> <li>is in stream type semantic relation with</li> </ul> can be flattened into<sup>op</sup> # OPs URI <code>https://w3id.org/stax/ontology#canBeFlattenedInto</code> Description <p>Indicates that the subject stream type can be flattened into the object.</p> <p>The flattening is done by enumerating all components of the stream elements in one, flat stream. For example, a graph stream can be flattened into a flat triple stream.</p> Super-properties is in stream type semantic relation with<sup>op</sup> Domain(s) Concrete RDF stream type<sup>c</sup> Range(s) stax:ConcreteRdfStreamType<sup>c</sup> can be grouped into<sup>op</sup> # OPs URI <code>https://w3id.org/stax/ontology#canBeGroupedInto</code> Description <p>Indicates that the subject stream type can be grouped into the object.</p> <p>The grouping is done by splitting the flat stream of statements into groups, which then can be used to construct elements of the grouped stream. For example, a flat triple stream can be grouped into a graph stream. In this operation, the ordering information within a group is lost.</p> Super-properties is in stream type semantic relation with<sup>op</sup> Domain(s) Concrete RDF stream type<sup>c</sup> Range(s) stax:ConcreteRdfStreamType<sup>c</sup> can be trivially extended into<sup>op</sup> # OPs URI <code>https://w3id.org/stax/ontology#canBeTriviallyExtendedInto</code> Description <p>Indicates that the subject stream type that uses triples or graphs can be trivially extended into the object type that uses quads or datasets.</p> <p>The extension is done by (in case of flat RDF streams) adding a fourth component, corresponding to the default graph. In case of grouped RDF streams, the contents of the graph are placed explicitly in the default graph.</p> Super-properties is in stream type semantic relation with<sup>op</sup> Domain(s) Concrete RDF stream type<sup>c</sup> Range(s) stax:ConcreteRdfStreamType<sup>c</sup> has element type<sup>op</sup> # OPs URI <code>https://w3id.org/stax/ontology#hasElementType</code> Description <p>For an RDF stream type, indicates the base (primitive) type of elements in the stream (e.g., triple, quad, graph, dataset).</p> Domain(s) Concrete RDF stream type<sup>c</sup> Range(s) stax:RdfElementType<sup>c</sup> has stream type<sup>op</sup> # OPs URI <code>https://w3id.org/stax/ontology#hasStreamType</code> Description <p>For an RDF stream type usage, this property indicates which stream type is used.</p> Domain(s) RDF stream type usage<sup>c</sup> Range(s) stax:ConcreteRdfStreamType<sup>c</sup> has stream type usage<sup>op</sup> # OPs URI <code>https://w3id.org/stax/ontology#hasStreamTypeUsage</code> Description <p>Inverse of stax:isUsageOf \u2013 indicates that the subject is related to a usage of an RDF stream type.</p> <p>The subject for this property can be for example a published stream on the Web (e.g., vocals:RDFStream) or a scientific publication that discusses a usage of an RDF stream type.</p> Inverse properties is usage of<sup>op</sup> Range(s) stax:RdfStreamTypeUsage<sup>c</sup> is usage of<sup>op</sup> # OPs URI <code>https://w3id.org/stax/ontology#isUsageOf</code> Description <p>For an RDF stream type usage, this property indicates where the stream was used or from where the usage was derived. The value of this property can be anything that makes sense for the desired use case. The value can be for example: the DOI URL of an academic work, URL of a piece of software, IRI of a published stream, IRI of an RDF dataset.</p> <p>Inverse of stax:hasStreamTypeUsage.</p> Domain(s) RDF stream type usage<sup>c</sup> is in stream type semantic relation with<sup>op</sup> # OPs URI <code>https://w3id.org/stax/ontology#streamTypeSemanticRelation</code> Description <p>This property should not be used directly, but as a super-property for all properties denoting a relationship of meaning between RDF stream types.</p> Super-properties skos:semanticRelation Domain(s) Concrete RDF stream type<sup>c</sup> Range(s) stax:ConcreteRdfStreamType<sup>c</sup> Annotation Properties \u2191 <ul> <li>description</li> <li>title</li> <li>created</li> <li>issued</li> <li>license</li> <li>modified</li> <li>publisher</li> <li>source</li> <li>status</li> <li>preferredNamespacePrefix</li> <li>preferredNamespaceUri</li> <li>citation</li> <li>homepage</li> <li>logo</li> </ul> description<sup>ap</sup> # APs URI <code>http://purl.org/dc/elements/1.1/description</code> title<sup>ap</sup> # APs URI <code>http://purl.org/dc/elements/1.1/title</code> created<sup>ap</sup> # APs URI <code>http://purl.org/dc/terms/created</code> issued<sup>ap</sup> # APs URI <code>http://purl.org/dc/terms/issued</code> license<sup>ap</sup> # APs URI <code>http://purl.org/dc/terms/license</code> modified<sup>ap</sup> # APs URI <code>http://purl.org/dc/terms/modified</code> publisher<sup>ap</sup> # APs URI <code>http://purl.org/dc/terms/publisher</code> source<sup>ap</sup> # APs URI <code>http://purl.org/dc/terms/source</code> status<sup>ap</sup> # APs URI <code>http://purl.org/ontology/bibo/status</code> preferredNamespacePrefix<sup>ap</sup> # APs URI <code>http://purl.org/vocab/vann/preferredNamespacePrefix</code> preferredNamespaceUri<sup>ap</sup> # APs URI <code>http://purl.org/vocab/vann/preferredNamespaceUri</code> citation<sup>ap</sup> # APs URI <code>http://schema.org/citation</code> homepage<sup>ap</sup> # APs URI <code>http://xmlns.com/foaf/0.1/homepage</code> logo<sup>ap</sup> # APs URI <code>http://xmlns.com/foaf/0.1/logo</code> Named Individuals \u2191 <ul> <li>Flat RDF quad stream</li> <li>Flat RDF stream</li> <li>Flat RDF triple stream</li> <li>Grouped RDF stream</li> <li>RDF Stream Taxonomy</li> <li>RDF dataset</li> <li>RDF dataset stream</li> <li>RDF graph</li> <li>RDF graph stream</li> <li>RDF named graph stream</li> <li>RDF quad</li> <li>RDF stream</li> <li>RDF subject graph stream</li> <li>RDF triple</li> <li>Timestamped RDF named graph stream</li> </ul> RDF Stream Taxonomy<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology                    </code> Class(es) skos:ConceptScheme owl:Ontology Source https://github.com/RDF-STaX/rdf-stax.github.io/tree/main Description                      RDF-STaX is an OWL 2 DL ontology that enables describing the types of RDF streams and defines relations between them.                  RDF dataset<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#dataset                    </code> Class(es) stax:RdfElementType Description                      https://www.w3.org/TR/rdf11-concepts/#section-dataset                  RDF dataset stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#datasetStream                    </code> Class(es) skos:Concept stax:ConcreteRdfStreamType Description                      An RDF dataset stream is a grouped RDF stream whose elements are RDF datasets.                  Flat RDF quad stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#flatQuadStream                    </code> Class(es) skos:Concept stax:ConcreteRdfStreamType Description                      A flat RDF quad stream is a flat RDF stream whose elements are quads.                  Flat RDF stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#flatStream                    </code> Class(es) stax:AbstractRdfStreamType skos:Concept Description                      A flat RDF stream is an RDF stream whose elements are statements (either RDF triples or RDF quads).                  Flat RDF triple stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#flatTripleStream                    </code> Class(es) skos:Concept stax:ConcreteRdfStreamType Description                      A flat RDF triple stream is a flat RDF stream whose elements are triples.                  RDF graph<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#graph                    </code> Class(es) stax:RdfElementType Description                      https://www.w3.org/TR/rdf11-concepts/#section-rdf-graph                  RDF graph stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#graphStream                    </code> Class(es) skos:Concept stax:ConcreteRdfStreamType Description                      An RDF graph stream is a grouped RDF stream whose elements are unnamed (default) RDF graphs.                  Grouped RDF stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#groupedStream                    </code> Class(es) stax:AbstractRdfStreamType skos:Concept Description                      A grouped RDF stream is an RDF stream whose elements are either RDF graphs or RDF datasets.                  RDF named graph stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#namedGraphStream                    </code> Class(es) skos:Concept stax:ConcreteRdfStreamType Description                      An RDF named graph stream is an RDF dataset stream in which every element has exactly one named RDF graph pair , where G is an RDF graph, and n is the graph name. Apart from graph G, the dataset may contain any number of triples in the default graph.                  RDF quad<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#quad                    </code> Class(es) stax:RdfElementType Description                      https://www.w3.org/TR/2023/WD-rdf12-concepts-20231013/#section-dataset-quad                  RDF stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#rdfStream                    </code> Class(es) stax:AbstractRdfStreamType skos:Concept Description                      An RDF stream is an ordered, potentially infinite sequence of RDF stream elements.                  RDF subject graph stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#subjectGraphStream                    </code> Class(es) skos:Concept stax:ConcreteRdfStreamType Description                      An RDF subject graph stream is an RDF graph stream in which every element contains an IRI node (called the subject node) that uniquely identifies the graph in the stream. Every other node in the graph can be reached by traversing triples, starting from the subject node.                  Timestamped RDF named graph stream<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#timestampedNamedGraphStream                    </code> Class(es) skos:Concept stax:ConcreteRdfStreamType Description                      A timestamped named graph is an RDF dataset in which: (1) there is exactly one named RDF graph pair , where G is an RDF graph, and n is the graph name; (2) the default graph includes a timestamp triple , where p is a timestamp predicate that relates t, called the timestamp, and the graph G.  A timestamped RDF named graph stream is an RDF named graph stream in which every element is a timestamped named graph. The elements that share the same timestamp predicate p are ordered by the partial order associated with p.                  RDF triple<sup>ni</sup> URI <code>                       https://w3id.org/stax/ontology#triple                    </code> Class(es) stax:RdfElementType Description                      https://www.w3.org/TR/rdf11-concepts/#section-triples                  Namespaces \u2191 default (stax) <code>https://w3id.org/stax/ontology#</code> brick <code>https://brickschema.org/schema/Brick#</code> csvw <code>http://www.w3.org/ns/csvw#</code> dc <code>http://purl.org/dc/elements/1.1/</code> dcam <code>http://purl.org/dc/dcam/</code> dcat <code>http://www.w3.org/ns/dcat#</code> dcmitype <code>http://purl.org/dc/dcmitype/</code> dcterms <code>http://purl.org/dc/terms/</code> doap <code>http://usefulinc.com/ns/doap#</code> foaf <code>http://xmlns.com/foaf/0.1/</code> geo <code>http://www.opengis.net/ont/geosparql#</code> ns1 <code>http://purl.org/ontology/bibo/</code> odrl <code>http://www.w3.org/ns/odrl/2/</code> org <code>http://www.w3.org/ns/org#</code> owl <code>http://www.w3.org/2002/07/owl#</code> prof <code>http://www.w3.org/ns/dx/prof/</code> prov <code>http://www.w3.org/ns/prov#</code> qb <code>http://purl.org/linked-data/cube#</code> rdf <code>http://www.w3.org/1999/02/22-rdf-syntax-ns#</code> rdfs <code>http://www.w3.org/2000/01/rdf-schema#</code> schema1 <code>http://schema.org/</code> sd <code>http://www.w3.org/ns/sparql-service-description#</code> sdo <code>https://schema.org/</code> sh <code>http://www.w3.org/ns/shacl#</code> skos <code>http://www.w3.org/2004/02/skos/core#</code> sosa <code>http://www.w3.org/ns/sosa/</code> ssn <code>http://www.w3.org/ns/ssn/</code> time <code>http://www.w3.org/2006/time#</code> vann <code>http://purl.org/vocab/vann/</code> void <code>http://rdfs.org/ns/void#</code> wgs <code>https://www.w3.org/2003/01/geo/wgs84_pos#</code> xsd <code>http://www.w3.org/2001/XMLSchema#</code> Legend <sup>c</sup>Classes <sup>op</sup>Object Properties <sup>fp</sup>Functional Properties <sup>dp</sup>Data Properties <sup>ap</sup>Annotation Properties <sup>p</sup>Properties <sup>ni</sup>Named Individuals"},{"location":"ontology/#owl-2-profiles","title":"OWL 2 Profiles","text":"<p>The ontology is written in OWL 2 DL. It is checked for compliance with the profile in the CI pipeline.</p> <p>RDF-STaX imports SKOS, which is OWL 2 Full by default. There is however a subset of SKOS that is OWL 2 DL, and this is the version of SKOS that is used in RDF-STaX.</p> <p>The released version of the ontology includes additional assertions (inferred, authorship, alignments) that are not part of the ontology itself. These assertions may be in OWL 2 Full. To get the OWL 2 DL version of the ontology, see the notes on versioning and releases below.</p>"},{"location":"ontology/#versioning-and-releases","title":"Versioning and releases","text":"<p>RDF-STaX follows the Semantic Versioning 2 scheme. The version number is stored in the <code>owl:versionInfo</code> annotation property of the ontology and is a part of the version IRI. The <code>dev</code> version corresponds to the <code>main</code> branch of the repository. When you don't specify a version, the <code>dev</code> version is used.</p> <p>The dropdown at the top of the page allows you to switch between different versions of the documentation. Previous releases can also be found on GitHub.</p> <p>The released versions of the ontology include also the inferred statements, authorship information, and alignments to other ontologies. If you would like to get the raw ontology without these additions (OWL 2 DL), append <code>/dl</code> to the URL, e.g., <code>https://w3id.org/stax/ontology/dl</code>.</p> <p>Released versions of the ontology are available in the JSON-LD, N-Triples, RDF/XML, and Turtle formats, by appending their respective extension at the end of the ontology's URL, or with the content negotiation mechanism. Some examples of links that would work:</p> <ul> <li><code>https://w3id.org/stax/ontology</code> (content negotiation)</li> <li><code>https://w3id.org/stax/ontology.rdf</code> (explicitly ask for RDF/XML)</li> <li><code>https://w3id.org/stax/ontology/dl.rdf</code> (OWL 2 DL version, explicitly ask for RDF/XML)</li> <li><code>https://w3id.org/stax/dev/ontology</code> (content negotiation)</li> <li><code>https://w3id.org/stax/dev/ontology/dl</code> (OWL 2 DL version, content negotiation)</li> <li><code>https://w3id.org/stax/dev/ontology.ttl</code> (explicitly ask for Turtle)</li> <li><code>https://w3id.org/stax/1.0.0/ontology</code> (content negotiation)</li> <li><code>https://w3id.org/stax/1.0.0/ontology.jsonld</code> (explicitly ask for JSON-LD)</li> </ul> <p>Important</p> <p>The RDF of the ontology can only be accessed via the ontology's PURL (<code>https://w3id.org/stax/...</code>), not via the URL you currently see in your browser.</p> <p>Note</p> <p>The process for making releases is described on the Contributing page.</p>"},{"location":"ontology/#archival-in-zenodo","title":"Archival in Zenodo","text":"<p>Each RDF-STaX release is archived in Zenodo under this DOI: 10.5281/zenodo.10072907.</p>"},{"location":"ontology/#see-also","title":"See also","text":"<ul> <li>How to use it?</li> <li>Taxonomy overview</li> <li>Contributing</li> </ul>"},{"location":"taxonomy/","title":"Taxonomy overview","text":"<p>The diagram below is an overview of the RDF Stream Taxonomy (RDF-STaX). Each term in the diagram is represented by an instance of the <code>stax:RdfStreamType</code> class in the RDF-STaX ontology. The ontology also contains the formal definitions of each stream type.</p> <p> </p> Overview of the taxonomy \u2013 click to enlarge."},{"location":"taxonomy/#abstract-stream-types","title":"Abstract stream types","text":"<p>Abstract stream types only serve as a basis for the concrete stream types. They are not intended to be used directly.</p>"},{"location":"taxonomy/#rdf-stream","title":"RDF stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#rdfStream</code></p> <p>An RDF stream is an ordered, potentially infinite sequence of RDF stream elements.</p>"},{"location":"taxonomy/#grouped-rdf-stream","title":"Grouped RDF stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#groupedStream</code></p> <p>A grouped RDF stream is an RDF stream whose elements are either RDF graphs or RDF datasets.</p>"},{"location":"taxonomy/#flat-rdf-stream","title":"Flat RDF stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#flatStream</code></p> <p>A flat RDF stream is an RDF stream whose elements are statements (either RDF triples or RDF quads).</p>"},{"location":"taxonomy/#concrete-stream-types-grouped","title":"Concrete stream types (grouped)","text":""},{"location":"taxonomy/#rdf-graph-stream","title":"RDF graph stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#graphStream</code></p> <p>An RDF graph stream is a grouped RDF stream whose elements are unnamed (default) RDF graphs.</p> <p>Can be flattened<sup>1</sup> into a flat RDF triple stream.  Can be trivially extended<sup>3</sup> into an RDF dataset stream.</p>"},{"location":"taxonomy/#rdf-subject-graph-stream","title":"RDF subject graph stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#subjectGraphStream</code></p> <p>An RDF subject graph stream is an RDF graph stream in which every element contains an IRI node (called the subject node) that uniquely identifies the graph in the stream. Every other node in the graph can be reached by traversing triples, starting from the subject node.</p> <p>Can be flattened<sup>1</sup> into a flat RDF triple stream.  Can be trivially extended<sup>3</sup> into an RDF dataset stream.</p>"},{"location":"taxonomy/#rdf-dataset-stream","title":"RDF dataset stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#datasetStream</code></p> <p>An RDF dataset stream is a grouped RDF stream whose elements are RDF datasets.</p> <p>Can be flattened<sup>1</sup> into a flat RDF quad stream.</p>"},{"location":"taxonomy/#rdf-named-graph-stream","title":"RDF named graph stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#namedGraphStream</code></p> <p>An RDF named graph stream is an RDF dataset stream in which every element has exactly one named RDF graph pair \\(\\langle n, G \\rangle\\), where \\(G\\) is an RDF graph, and \\(n\\) is the graph name. Apart from graph \\(G\\), the dataset may contain any number of triples in the default graph.</p> <p>Can be flattened<sup>1</sup> into a flat RDF quad stream.</p>"},{"location":"taxonomy/#timestamped-rdf-named-graph-stream","title":"Timestamped RDF named graph stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#timestampedNamedGraphStream</code></p> <p>A timestamped named graph is an RDF dataset in which:  (1) there is exactly one named RDF graph pair \\(\\langle n, G \\rangle\\), where \\(G\\) is an RDF graph, and \\(n\\) is the graph name;  (2) the default graph includes a timestamp triple \\(\\langle n, p, t \\rangle\\), where \\(p\\) is a timestamp predicate that relates \\(t\\), called the timestamp, and the graph \\(G\\).</p> <p>A timestamped RDF named graph stream is an RDF named graph stream in which every element is a timestamped named graph. The elements that share the same timestamp predicate \\(p\\) are ordered by the partial order associated with \\(p\\).</p> <p>Can be flattened<sup>1</sup> into a flat RDF quad stream.</p>"},{"location":"taxonomy/#concrete-stream-types-flat","title":"Concrete stream types (flat)","text":""},{"location":"taxonomy/#flat-rdf-triple-stream","title":"Flat RDF triple stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#flatTripleStream</code></p> <p>A flat RDF triple stream is a flat RDF stream whose elements are triples.</p> <p>Can be grouped<sup>2</sup> into an RDF graph stream.  Can be trivially extended<sup>3</sup> into a flat RDF quad stream.</p>"},{"location":"taxonomy/#flat-rdf-quad-stream","title":"Flat RDF quad stream","text":"<p>IRI: <code>https://w3id.org/stax/ontology#flatQuadStream</code></p> <p>A flat RDF quad stream is a flat RDF stream whose elements are quads.</p> <p>Can be grouped<sup>2</sup> into an RDF dataset stream.</p>"},{"location":"taxonomy/#see-also","title":"See also","text":"<ul> <li>You can find a detailed discussion on the taxonomy in the RDF-STaX paper.</li> <li>Ontology documentation</li> <li>How to use RDF-STaX?</li> </ul>"},{"location":"taxonomy/#footnotes","title":"Footnotes","text":"<ol> <li> <p>The flattening is done by enumerating all components of the stream elements in one, flat stream. For example, a graph stream can be flattened into a flat triple stream.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>The grouping is done by splitting the flat stream of statements into groups, which then can be used to construct elements of the grouped stream. For example, a flat triple stream can be grouped into a graph stream. In this operation, the ordering information within a group is lost.\u00a0\u21a9\u21a9</p> </li> <li> <p>You can extend a stream that uses triples or graphs into a stream type that uses quads or datasets. The extension is done by (in case of flat RDF streams) adding a fourth component, corresponding to the default graph. In case of grouped RDF streams, the contents of the graph are placed explicitly in the default graph.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"use-it/","title":"How to use RDF-STaX?","text":"<p>RDF stream type usage is often a subjective matter, so RDF-STaX provides facilities for making subjective assertions about RDF stream types. For example: I see this resource as an RDF graph stream, because (...), as opposed to strict, universal classification. The types in RDF-STaX are semantically related, allowing you to reason about them.</p> <p>The assertions can be made by anyone, anywhere. You can use RDF-STaX to annotate published streams, datasets, research papers, software, and more.</p>"},{"location":"use-it/#annotating-rdf-stream-types","title":"Annotating RDF stream types","text":"<p>Making a statement about something's RDF stream type is very straightforward. For example, to say that <code>&lt;https://example.org/some-resource&gt;</code> is an RDF graph stream, you would use the <code>stax:RdfStreamTypeUsage</code> class:</p> <pre><code>@prefix stax: &lt;https://w3id.org/stax/ontology#&gt; .\n\n_:usage a stax:RdfStreamTypeUsage ;\n    stax:hasStreamType stax:graphStream ;\n    stax:isUsageOf &lt;https://example.org/some-resource&gt; .\n</code></pre> <p>It is recommended (but not required) to have one <code>stax:RdfStreamTypeUsage</code> instance per annotated resource and per RDF stream type. This makes it easier to find all the annotations for a given resource or stream type.</p> <p>You can also make the statement in reverse, by annotating the resource itself. This can be especially useful when annotating RDF streams on the Web or in a dataset. The following three examples illustrate combining RDF-STaX with other vocabularies for describing datasets and streams (VoCaLS, VoID, DCAT).</p> Example: VoCaLS <code>RDFStream</code> (click to expand) <p>To annotate a <code>vocals:RDFStream</code> from the VoCaLS Vocabulary:</p> <pre><code>@prefix stax: &lt;https://w3id.org/stax/ontology#&gt; .\n@prefix vocals: &lt;http://w3id.org/rsp/vocals#&gt; .\n\n_:stream a vocals:RDFStream ;\n    # ... other properties of the stream ...\n    stax:hasStreamTypeUsage [\n        a stax:RdfStreamTypeUsage ;\n        stax:hasStreamType stax:graphStream\n    ] .\n</code></pre> Example: VoID <code>Dataset</code> (click to expand) <p>To annotate a <code>void:Dataset</code> from the VoID Vocabulary:</p> <pre><code>@prefix stax: &lt;https://w3id.org/stax/ontology#&gt; .\n@prefix void: &lt;http://rdfs.org/ns/void#&gt; .\n\n_:dataset a void:Dataset ;\n    # ... other properties of the dataset ...\n    stax:hasStreamTypeUsage [\n        a stax:RdfStreamTypeUsage ;\n        stax:hasStreamType stax:flatTripleStream\n    ] .\n</code></pre> <p>In VoID, <code>void:Dataset</code> refers to a set of triples, which can be viewed as a flat RDF triple stream.</p> Example: DCAT <code>Distribution</code> (click to expand) <p>In DCAT, a dataset may have multiple representations (<code>dcat:Distribution</code>). Thus, tou may want to annotate the distribution, not the dataset itself:</p> <pre><code>@prefix dcat: &lt;http://www.w3.org/ns/dcat#&gt; .\n@prefix stax: &lt;https://w3id.org/stax/ontology#&gt; .\n\n_:dataset a dcat:Dataset ;\n    # ... other properties of the dataset ...\n    dcat:distribution [\n        a dcat:Distribution ;\n        # ... other properties of the distribution ...\n        stax:hasStreamTypeUsage [\n            a stax:RdfStreamTypeUsage ;\n            stax:hasStreamType stax:datasetStream\n        ]\n    ] .\n</code></pre> <p>Of course, annotating the dataset itself also makes sense, if you want to make a statement about the dataset as a whole.</p>"},{"location":"use-it/#adding-more-information","title":"Adding more information","text":"<p>The <code>stax:RdfStreamTypeUsage</code> instance is a good place to put additional information about the usage, such as a textual explanation, the source of the information, or the author of the statement. For example:</p> <pre><code>@prefix cito: &lt;http://purl.org/spar/cito/&gt; .\n@prefix dcterms: &lt;http://purl.org/dc/terms/&gt; .\n@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .\n@prefix stax: &lt;https://w3id.org/stax/ontology#&gt; .\n\n_:usage a stax:RdfStreamTypeUsage ;\n    rdfs:comment \"The authors state that for their proposed system, 'the streaming element (i.e. a single message) (...) is a set of triples'. Therefore, internally it uses an RDF graph stream.\"@en ;\n    stax:hasStreamType stax:graphStream ;\n    stax:isUsageOf &lt;https://doi.org/10.1109/ICSTCC.2017.8107003&gt; ;\n    cito:citesAsEvidence &lt;https://doi.org/10.1109/ICSTCC.2017.8107003&gt; ;\n    dcterms:creator &lt;https://orcid.org/0000-0002-2543-9461&gt; .\n</code></pre> <p>You can use whatever properties you like, however, the following are recommended:</p> <ul> <li>CiTO ontology for typing the citations.</li> <li>DCMI Metadata Terms for the statement author information.</li> <li><code>rdfs:comment</code> for the textual explanation.</li> <li>For statement creators, we recommend using ORCID.</li> <li>For research works, we recommend using DOI.</li> </ul> <p>These rich annotations are used in RDF-STaX nanopublications.</p>"},{"location":"use-it/#making-rdf-stream-type-usage-nanopublications","title":"Making RDF stream type usage nanopublications","text":"<p>This subjective style of RDF-STaX meshes very well with the idea of nanopublications, small snippets of scientific knowledge. See the documentation page on nanopublications for more information on how to find, use, and create them.</p>"},{"location":"use-it/#using-semantic-relations-from-the-ontology","title":"Using semantic relations from the ontology","text":"<p>The ontology includes several semantic relations between the RDF stream types. You can use them to reason about the types \u2013 for example can stream of type X be flattened into type Y?</p> <ul> <li><code>skos:broader</code> and <code>skos:narrower</code> \u2013 properties indicating sub- and super-types of streams.</li> <li><code>stax:canBeFlattenedInto</code> \u2013 property indicating that a stream of type X can be flattened into a stream of type Y. For example, a <code>stax:graphStream</code> can be flattened into a <code>stax:flatTripleStream</code>.</li> <li><code>stax:canBeGroupedInto</code> \u2013 property indicating that a stream of type X can be grouped into a stream of type Y. For example, a <code>stax:flatQuadStream</code> can be grouped into a <code>stax:datasetStream</code>.</li> <li><code>stax:canBeTriviallyExtendedInto</code> \u2013 property indicating that a stream of type X can be trivially turned into a stream of type Y, by explicitly adding the graph component (default graph). For example, a <code>stax:flatTripleStream</code> can be trivially extended into a <code>stax:flatQuadStream</code>.</li> </ul> <p>These semantic relations are used in RiverBench to validate the stream type annotations.</p>"},{"location":"use-it/#see-also","title":"See also","text":"<ul> <li>Licensing and citation</li> <li>Taxonomy overview</li> <li>Ontology documentation</li> <li>Nanopublications</li> <li>Existing use cases</li> </ul>"},{"location":"includes/links/","title":"Links","text":"<p>Info</p> <p>Download the ontology in RDF: Turtle, N-Triples, JSON-LD, RDF/XML.</p>"},{"location":"includes/nanopub_links/","title":"Nanopub links","text":"<p>Info</p> <p>Download the RDF-STaX nanopublication dump in RDF: TriG, N-Quads.</p> <p>The dump includes 32 nanopublications. Created at: 2024-04-10T08:58:28 UTC.</p>"},{"location":"includes/tests/","title":"Tests","text":""},{"location":"includes/tests/#use-case-1","title":"Use case 1","text":"<p>Test use case description. With Markdown formatting.</p>"},{"location":"includes/tests/#test-cq11-definition","title":"Test CQ1.1 (definition)","text":"<p>Question: What are the names of all RDF stream types?</p> <p>Expectation: there are 10 query results</p> SPARQL query of the test <pre><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX skos: &lt;http://www.w3.org/2004/02/skos/core#&gt;\nPREFIX stax: &lt;https://w3id.org/stax/ontology#&gt;\n\nSELECT * WHERE {\n    ?streamType a/rdfs:subClassOf* stax:RdfStreamType ;\n        skos:prefLabel ?label .\n}\n</code></pre>"},{"location":"includes/tests/#test-cq12-definition","title":"Test CQ1.2 (definition)","text":"<p>Question: What are the names of all RDF stream types?</p> <p>Expectation: query results are not empty</p> SPARQL query of the test <pre><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX skos: &lt;http://www.w3.org/2004/02/skos/core#&gt;\nPREFIX stax: &lt;https://w3id.org/stax/ontology#&gt;\n\nSELECT * WHERE {\n    ?streamType a/rdfs:subClassOf* stax:RdfStreamType ;\n        skos:prefLabel ?label .\n}\n</code></pre>"},{"location":"includes/tests/#use-case-2","title":"Use case 2","text":"<p>Test use case 2 description. With Markdown formatting.</p>"},{"location":"includes/tests/#test-cq21-definition","title":"Test CQ2.1 (definition)","text":"<p>Question: What are the names of all RDF stream types?</p> <p>Expectation: there are 10 query results</p> SPARQL query of the test <pre><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX skos: &lt;http://www.w3.org/2004/02/skos/core#&gt;\nPREFIX stax: &lt;https://w3id.org/stax/ontology#&gt;\n\nSELECT * WHERE {\n    ?streamType a/rdfs:subClassOf* stax:RdfStreamType ;\n        skos:prefLabel ?label .\n}\n</code></pre>"},{"location":"uses/","title":"RDF-STaX uses and publications","text":"<p>Are you using RDF-STaX in your project or paper? We would be glad to list it here! Please open an issue with a link or a brief explanation of how you use RDF-STaX.</p>"},{"location":"uses/#papers-using-rdf-stax","title":"Papers using RDF-STaX","text":"<ul> <li>Sowinski, P., Szmeja, P. Ganzha, M., &amp; Paprzycki, M. (2023). RDF Stream Taxonomy: Systematizing RDF Stream Types in Research and Practice. arXiv preprint arXiv:2311.14540.</li> <li>Sowinski, P., Ganzha, M., &amp; Paprzycki, M. (2023). RiverBench: an Open RDF Streaming Benchmark Suite. arXiv preprint arXiv:2305.06226.</li> </ul>"},{"location":"uses/#projects-using-rdf-stax","title":"Projects using RDF-STaX","text":""},{"location":"uses/#riverbench","title":"RiverBench","text":"<p>RiverBench is an open, community-driven RDF streaming benchmark suite. It uses RDF-STaX for annotating the stream types of the benchmark datasets. The RDF-STaX annotation system is integrated into the RiverBench metadata ontology.</p> <p>Each dataset is assigned two stream type usages \u2013 one grouped RDF stream type and one flat RDF stream type. This is because in RiverBench each dataset can be viewed as either streaming or flat. Each dataset also has multiple distributions (flat or streaming) which are annotated with the corresponding stream type usage. The annotations are validated using SHACL, to make sure that the annotation is not contradictory (see the rules). For this, the <code>stax:canBeFlattenedInto</code> and <code>stax:canBeGroupedInto</code> properties are used, along with the taxonomical structure from SKOS.</p> Example usage (click to expand) <p>From dataset digital-agenda-indicators (source):</p> <pre><code>:dataset stax:hasStreamTypeUsage [\n    a stax:RdfStreamTypeUsage ;\n    rdfs:comment \"The dataset can be viewed as a stream of graphs corresponding to statistical observations. Each graph is uniquely identified by its subject IRI.\"@en ;\n    stax:hasStreamType stax:subjectGraphStream\n] , [\n    a stax:RdfStreamTypeUsage ;\n    rdfs:comment \"The dataset can be viewed as a flattened stream of triples.\"@en ;\n    stax:hasStreamType stax:flatTripleStream\n] .\n</code></pre> <p>The distribution annotations are generated automatically by the CI. You can find the complete generated metadata here.</p> <p>Links:</p> <ul> <li>Profiles group datasets by stream type</li> <li>Datasets (example) include <code>stax:hasStreamTypeUsage</code> annotations. This can be seen in:<ul> <li>Dataset documentation pages</li> <li>Dataset RDF metadata</li> </ul> </li> <li>Complete metadata dump</li> </ul>"},{"location":"uses/#nanopublications","title":"Nanopublications","text":"<p>RDF-STaX is used in nanopublications to annotate stream types in research works or software. You can find more information on the dedicated page about nanopublications.</p>"},{"location":"uses/#use-case-based-competency-question-tests","title":"Use case-based competency question tests","text":"<p>Based on the above use cases, a number of competency question tests were created. The tests are implemented as SPARQL queries and are used in Continuous Integration (CI) to test the RDF-STaX ontology. You can find a list of all the tests on this subpage. The documentation for creating new tests is available here.</p>"},{"location":"uses/#see-also","title":"See also","text":"<ul> <li>Competency question tests</li> <li>Contributing</li> <li>Licensing and citation</li> </ul>"},{"location":"uses/cq/","title":"Competency question tests","text":"<p>The following competency question tests are based on the use cases of RDF-STaX. The tests are implemented as SPARQL queries and are used in Continuous Integration (CI) to test the RDF-STaX ontology whenever any change to it is made. The following list is generated automatically based on the tests defined in the main RDF-STaX repository.</p> <p>The documentation for creating new tests is available here.</p>"},{"location":"uses/cq/#use-case-1","title":"Use case 1","text":"<p>Test use case description. With Markdown formatting.</p>"},{"location":"uses/cq/#test-cq11-definition","title":"Test CQ1.1 (definition)","text":"<p>Question: What are the names of all RDF stream types?</p> <p>Expectation: there are 10 query results</p> SPARQL query of the test <pre><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX skos: &lt;http://www.w3.org/2004/02/skos/core#&gt;\nPREFIX stax: &lt;https://w3id.org/stax/ontology#&gt;\n\nSELECT * WHERE {\n    ?streamType a/rdfs:subClassOf* stax:RdfStreamType ;\n        skos:prefLabel ?label .\n}\n</code></pre>"},{"location":"uses/cq/#test-cq12-definition","title":"Test CQ1.2 (definition)","text":"<p>Question: What are the names of all RDF stream types?</p> <p>Expectation: query results are not empty</p> SPARQL query of the test <pre><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX skos: &lt;http://www.w3.org/2004/02/skos/core#&gt;\nPREFIX stax: &lt;https://w3id.org/stax/ontology#&gt;\n\nSELECT * WHERE {\n    ?streamType a/rdfs:subClassOf* stax:RdfStreamType ;\n        skos:prefLabel ?label .\n}\n</code></pre>"},{"location":"uses/cq/#use-case-2","title":"Use case 2","text":"<p>Test use case 2 description. With Markdown formatting.</p>"},{"location":"uses/cq/#test-cq21-definition","title":"Test CQ2.1 (definition)","text":"<p>Question: What are the names of all RDF stream types?</p> <p>Expectation: there are 10 query results</p> SPARQL query of the test <pre><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX skos: &lt;http://www.w3.org/2004/02/skos/core#&gt;\nPREFIX stax: &lt;https://w3id.org/stax/ontology#&gt;\n\nSELECT * WHERE {\n    ?streamType a/rdfs:subClassOf* stax:RdfStreamType ;\n        skos:prefLabel ?label .\n}\n</code></pre>"}]}